
LCD_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  0000026e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080020e  0080020e  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000086e  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f5  00000000  00000000  00000c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048a  00000000  00000000  00000e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000283  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d4  00000000  00000000  00001707  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00001adb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e6       	ldi	r30, 0x6E	; 110
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 30       	cpi	r26, 0x0E	; 14
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae e0       	ldi	r26, 0x0E	; 14
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 30       	cpi	r26, 0x0F	; 15
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	9c d0       	rcall	.+312    	; 0x258 <main>
 120:	a4 c0       	rjmp	.+328    	; 0x26a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_enable>:
		number = number/10;
		lcd_char(cache + 48);
	}
}
void cur_home() {
	lcd_command(0x02);
 124:	15 9a       	sbi	0x02, 5	; 2
 126:	8d e0       	ldi	r24, 0x0D	; 13
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_enable+0x4>
 12c:	00 00       	nop
 12e:	82 b1       	in	r24, 0x02	; 2
 130:	12 b8       	out	0x02, r1	; 2
 132:	08 95       	ret

00000134 <lcd_out>:
 134:	92 b1       	in	r25, 0x02	; 2
 136:	90 7f       	andi	r25, 0xF0	; 240
 138:	92 b9       	out	0x02, r25	; 2
 13a:	92 b1       	in	r25, 0x02	; 2
 13c:	82 95       	swap	r24
 13e:	8f 70       	andi	r24, 0x0F	; 15
 140:	98 2b       	or	r25, r24
 142:	92 b9       	out	0x02, r25	; 2
 144:	ef cf       	rjmp	.-34     	; 0x124 <lcd_enable>
 146:	08 95       	ret

00000148 <lcd_command>:
 148:	cf 93       	push	r28
 14a:	c8 2f       	mov	r28, r24
 14c:	82 b1       	in	r24, 0x02	; 2
 14e:	12 b8       	out	0x02, r1	; 2
 150:	8c 2f       	mov	r24, r28
 152:	f0 df       	rcall	.-32     	; 0x134 <lcd_out>
 154:	8c 2f       	mov	r24, r28
 156:	82 95       	swap	r24
 158:	80 7f       	andi	r24, 0xF0	; 240
 15a:	ec df       	rcall	.-40     	; 0x134 <lcd_out>
 15c:	8f ec       	ldi	r24, 0xCF	; 207
 15e:	97 e0       	ldi	r25, 0x07	; 7
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_command+0x18>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_command+0x1e>
 166:	00 00       	nop
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <lcd_data>:
 16c:	cf 93       	push	r28
 16e:	c8 2f       	mov	r28, r24
 170:	14 9a       	sbi	0x02, 4	; 2
 172:	e0 df       	rcall	.-64     	; 0x134 <lcd_out>
 174:	14 9a       	sbi	0x02, 4	; 2
 176:	8c 2f       	mov	r24, r28
 178:	82 95       	swap	r24
 17a:	80 7f       	andi	r24, 0xF0	; 240
 17c:	db df       	rcall	.-74     	; 0x134 <lcd_out>
 17e:	8f ec       	ldi	r24, 0xCF	; 207
 180:	97 e0       	ldi	r25, 0x07	; 7
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_data+0x16>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_data+0x1c>
 188:	00 00       	nop
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <lcd_setPos>:
 18e:	90 e4       	ldi	r25, 0x40	; 64
 190:	69 9f       	mul	r22, r25
 192:	80 0d       	add	r24, r0
 194:	11 24       	eor	r1, r1
 196:	80 58       	subi	r24, 0x80	; 128
 198:	d7 cf       	rjmp	.-82     	; 0x148 <lcd_command>
 19a:	08 95       	ret

0000019c <lcd_main>:
 19c:	80 91 0e 02 	lds	r24, 0x020E
 1a0:	d3 cf       	rjmp	.-90     	; 0x148 <lcd_command>
 1a2:	08 95       	ret

000001a4 <blink_off>:
 1a4:	80 91 0e 02 	lds	r24, 0x020E
 1a8:	8d 7f       	andi	r24, 0xFD	; 253
 1aa:	80 93 0e 02 	sts	0x020E, r24
 1ae:	f6 cf       	rjmp	.-20     	; 0x19c <lcd_main>
 1b0:	08 95       	ret

000001b2 <cur_off>:
 1b2:	80 91 0e 02 	lds	r24, 0x020E
 1b6:	8c 7f       	andi	r24, 0xFC	; 252
 1b8:	80 93 0e 02 	sts	0x020E, r24
 1bc:	ef cf       	rjmp	.-34     	; 0x19c <lcd_main>
 1be:	08 95       	ret

000001c0 <lcd_clear>:
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	c2 cf       	rjmp	.-124    	; 0x148 <lcd_command>
 1c4:	08 95       	ret

000001c6 <lcd_init>:
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	81 b9       	out	0x01, r24	; 1
 1ca:	12 b8       	out	0x02, r1	; 2
 1cc:	8f e5       	ldi	r24, 0x5F	; 95
 1ce:	9a ee       	ldi	r25, 0xEA	; 234
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0xa>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_init+0x10>
 1d6:	00 00       	nop
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	ac df       	rcall	.-168    	; 0x134 <lcd_out>
 1dc:	8f e1       	ldi	r24, 0x1F	; 31
 1de:	9e e4       	ldi	r25, 0x4E	; 78
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init+0x1a>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_init+0x20>
 1e6:	00 00       	nop
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	a4 df       	rcall	.-184    	; 0x134 <lcd_out>
 1ec:	8f e0       	ldi	r24, 0x0F	; 15
 1ee:	97 e2       	ldi	r25, 0x27	; 39
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_init+0x2a>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_init+0x30>
 1f6:	00 00       	nop
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	9c df       	rcall	.-200    	; 0x134 <lcd_out>
 1fc:	8f e0       	ldi	r24, 0x0F	; 15
 1fe:	97 e2       	ldi	r25, 0x27	; 39
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_init+0x3a>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_init+0x40>
 206:	00 00       	nop
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	94 df       	rcall	.-216    	; 0x134 <lcd_out>
 20c:	8f e1       	ldi	r24, 0x1F	; 31
 20e:	9e e4       	ldi	r25, 0x4E	; 78
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x4a>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_init+0x50>
 216:	00 00       	nop
 218:	88 e2       	ldi	r24, 0x28	; 40
 21a:	96 df       	rcall	.-212    	; 0x148 <lcd_command>
 21c:	8f e0       	ldi	r24, 0x0F	; 15
 21e:	94 df       	rcall	.-216    	; 0x148 <lcd_command>
 220:	cf df       	rcall	.-98     	; 0x1c0 <lcd_clear>
 222:	86 e0       	ldi	r24, 0x06	; 6
 224:	91 df       	rcall	.-222    	; 0x148 <lcd_command>
 226:	9f e7       	ldi	r25, 0x7F	; 127
 228:	28 e3       	ldi	r18, 0x38	; 56
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	91 50       	subi	r25, 0x01	; 1
 22e:	20 40       	sbci	r18, 0x00	; 0
 230:	80 40       	sbci	r24, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <lcd_init+0x66>
 234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_init+0x70>
 236:	00 00       	nop
 238:	08 95       	ret

0000023a <sendString>:
	return;
}
void sendString(byte XPosition, byte YPosition, char *Text){
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ea 01       	movw	r28, r20
	
	lcd_setPos(XPosition, YPosition);
 240:	a6 df       	rcall	.-180    	; 0x18e <lcd_setPos>
	
	while(*Text != '\0'){
 242:	88 81       	ld	r24, Y
 244:	88 23       	and	r24, r24
 246:	29 f0       	breq	.+10     	; 0x252 <sendString+0x18>
 248:	21 96       	adiw	r28, 0x01	; 1
		lcd_data(*Text++);
 24a:	90 df       	rcall	.-224    	; 0x16c <lcd_data>
}
void sendString(byte XPosition, byte YPosition, char *Text){
	
	lcd_setPos(XPosition, YPosition);
	
	while(*Text != '\0'){
 24c:	89 91       	ld	r24, Y+
 24e:	81 11       	cpse	r24, r1
 250:	fc cf       	rjmp	.-8      	; 0x24a <sendString+0x10>
		lcd_data(*Text++);
	}
	
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <main>:
#include <avr/io.h>
#include "Display.h"

int main(void)
{
	lcd_init();
 258:	b6 df       	rcall	.-148    	; 0x1c6 <lcd_init>
	cur_off();
 25a:	ab df       	rcall	.-170    	; 0x1b2 <cur_off>
	blink_off();
 25c:	a3 df       	rcall	.-186    	; 0x1a4 <blink_off>

	sendString(5,0,"Hallo Werner");
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	52 e0       	ldi	r21, 0x02	; 2
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	85 e0       	ldi	r24, 0x05	; 5
 266:	e9 df       	rcall	.-46     	; 0x23a <sendString>
 268:	ff cf       	rjmp	.-2      	; 0x268 <main+0x10>

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
